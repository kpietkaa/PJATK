#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'sri8_types'

module Order
  class Client
    include ::Thrift::Client

    def add_product_to_order(product, amount)
      send_add_product_to_order(product, amount)
      return recv_add_product_to_order()
    end

    def send_add_product_to_order(product, amount)
      send_message('add_product_to_order', Add_product_to_order_args, :product => product, :amount => amount)
    end

    def recv_add_product_to_order()
      result = receive_message(Add_product_to_order_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_product_to_order failed: unknown result')
    end

    def remove_product_from_order(product)
      send_remove_product_from_order(product)
      return recv_remove_product_from_order()
    end

    def send_remove_product_from_order(product)
      send_message('remove_product_from_order', Remove_product_from_order_args, :product => product)
    end

    def recv_remove_product_from_order()
      result = receive_message(Remove_product_from_order_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'remove_product_from_order failed: unknown result')
    end

    def update_amount(product, amount)
      send_update_amount(product, amount)
      return recv_update_amount()
    end

    def send_update_amount(product, amount)
      send_message('update_amount', Update_amount_args, :product => product, :amount => amount)
    end

    def recv_update_amount()
      result = receive_message(Update_amount_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'update_amount failed: unknown result')
    end

    def confirm_order()
      send_confirm_order()
      return recv_confirm_order()
    end

    def send_confirm_order()
      send_message('confirm_order', Confirm_order_args)
    end

    def recv_confirm_order()
      result = receive_message(Confirm_order_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'confirm_order failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_add_product_to_order(seqid, iprot, oprot)
      args = read_args(iprot, Add_product_to_order_args)
      result = Add_product_to_order_result.new()
      result.success = @handler.add_product_to_order(args.product, args.amount)
      write_result(result, oprot, 'add_product_to_order', seqid)
    end

    def process_remove_product_from_order(seqid, iprot, oprot)
      args = read_args(iprot, Remove_product_from_order_args)
      result = Remove_product_from_order_result.new()
      result.success = @handler.remove_product_from_order(args.product)
      write_result(result, oprot, 'remove_product_from_order', seqid)
    end

    def process_update_amount(seqid, iprot, oprot)
      args = read_args(iprot, Update_amount_args)
      result = Update_amount_result.new()
      result.success = @handler.update_amount(args.product, args.amount)
      write_result(result, oprot, 'update_amount', seqid)
    end

    def process_confirm_order(seqid, iprot, oprot)
      args = read_args(iprot, Confirm_order_args)
      result = Confirm_order_result.new()
      result.success = @handler.confirm_order()
      write_result(result, oprot, 'confirm_order', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Add_product_to_order_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRODUCT = 1
    AMOUNT = 3

    FIELDS = {
      PRODUCT => {:type => ::Thrift::Types::STRUCT, :name => 'product', :class => ::Product},
      AMOUNT => {:type => ::Thrift::Types::I32, :name => 'amount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_product_to_order_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Remove_product_from_order_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRODUCT = 1

    FIELDS = {
      PRODUCT => {:type => ::Thrift::Types::STRUCT, :name => 'product', :class => ::Product}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Remove_product_from_order_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Product}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_amount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRODUCT = 1
    AMOUNT = 2

    FIELDS = {
      PRODUCT => {:type => ::Thrift::Types::STRUCT, :name => 'product', :class => ::Product},
      AMOUNT => {:type => ::Thrift::Types::I32, :name => 'amount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_amount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Confirm_order_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Confirm_order_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

